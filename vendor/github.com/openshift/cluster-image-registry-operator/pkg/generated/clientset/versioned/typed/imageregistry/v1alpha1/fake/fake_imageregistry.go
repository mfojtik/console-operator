// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	v1alpha1 "github.com/openshift/cluster-image-registry-operator/pkg/apis/imageregistry/v1alpha1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeImageRegistries implements ImageRegistryInterface
type FakeImageRegistries struct {
	Fake *FakeImageregistryV1alpha1
}

var imageregistriesResource = schema.GroupVersionResource{Group: "imageregistry.operator.openshift.io", Version: "v1alpha1", Resource: "imageregistries"}

var imageregistriesKind = schema.GroupVersionKind{Group: "imageregistry.operator.openshift.io", Version: "v1alpha1", Kind: "ImageRegistry"}

// Get takes name of the imageRegistry, and returns the corresponding imageRegistry object, and an error if there is any.
func (c *FakeImageRegistries) Get(name string, options v1.GetOptions) (result *v1alpha1.ImageRegistry, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootGetAction(imageregistriesResource, name), &v1alpha1.ImageRegistry{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.ImageRegistry), err
}

// List takes label and field selectors, and returns the list of ImageRegistries that match those selectors.
func (c *FakeImageRegistries) List(opts v1.ListOptions) (result *v1alpha1.ImageRegistryList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootListAction(imageregistriesResource, imageregistriesKind, opts), &v1alpha1.ImageRegistryList{})
	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &v1alpha1.ImageRegistryList{ListMeta: obj.(*v1alpha1.ImageRegistryList).ListMeta}
	for _, item := range obj.(*v1alpha1.ImageRegistryList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested imageRegistries.
func (c *FakeImageRegistries) Watch(opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewRootWatchAction(imageregistriesResource, opts))
}

// Create takes the representation of a imageRegistry and creates it.  Returns the server's representation of the imageRegistry, and an error, if there is any.
func (c *FakeImageRegistries) Create(imageRegistry *v1alpha1.ImageRegistry) (result *v1alpha1.ImageRegistry, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootCreateAction(imageregistriesResource, imageRegistry), &v1alpha1.ImageRegistry{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.ImageRegistry), err
}

// Update takes the representation of a imageRegistry and updates it. Returns the server's representation of the imageRegistry, and an error, if there is any.
func (c *FakeImageRegistries) Update(imageRegistry *v1alpha1.ImageRegistry) (result *v1alpha1.ImageRegistry, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootUpdateAction(imageregistriesResource, imageRegistry), &v1alpha1.ImageRegistry{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.ImageRegistry), err
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
func (c *FakeImageRegistries) UpdateStatus(imageRegistry *v1alpha1.ImageRegistry) (*v1alpha1.ImageRegistry, error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootUpdateSubresourceAction(imageregistriesResource, "status", imageRegistry), &v1alpha1.ImageRegistry{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.ImageRegistry), err
}

// Delete takes name of the imageRegistry and deletes it. Returns an error if one occurs.
func (c *FakeImageRegistries) Delete(name string, options *v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewRootDeleteAction(imageregistriesResource, name), &v1alpha1.ImageRegistry{})
	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeImageRegistries) DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error {
	action := testing.NewRootDeleteCollectionAction(imageregistriesResource, listOptions)

	_, err := c.Fake.Invokes(action, &v1alpha1.ImageRegistryList{})
	return err
}

// Patch applies the patch and returns the patched imageRegistry.
func (c *FakeImageRegistries) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha1.ImageRegistry, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootPatchSubresourceAction(imageregistriesResource, name, data, subresources...), &v1alpha1.ImageRegistry{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.ImageRegistry), err
}
